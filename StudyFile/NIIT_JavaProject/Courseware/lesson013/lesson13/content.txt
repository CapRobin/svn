一、jQuery简介
1.是什么？开源的js类库，就是一个js文件
2.有什么用？兼容不同浏览器 && 简化了js编程
3.特点：
	一切的操作都在jQuery对象上
	链式操作
	通过插件的方式，扩展jQuery的函数
	
二、获取jQuery对象
1.$('css选择器')
2.$('js对象')
3.$('html文本')

三、选择dom元素（重点：一箭双雕，除去6，都是css选择器）
1.基本特征
	#id
	.class
	tag

2.元素之间的关系
	后代关系：祖先元素     element
	父子关系：    父元素 > element
	所有兄弟：兄长元素 ~ element
	相邻兄弟：兄长元素 + element
	
	:first-child	子元素中的老大
	:last-child		子元素中的老小
	:nth-child(序号) 老几
	:only-child		独生子
	
	:first-of-type	[父元素下]这一类tag中的老大
	:last-of-type	[父元素下]这一类tag中的老小
	:nth-of-type(序号) 老几
	:only-of-type	独生子

3.attribute特征
		[attr]: 存在
	[attr = value]: 存在 且 值=value
	[attr != value]: 存在 且 值!=value
	
	[attr *= value]: 存在 且 值包含value
	[attr ~= value]: 存在 且 （以空格分隔的）值包含value	
	
	[attr ^= value]: 存在 且 value是前缀
	[attr |= value]: 存在 且 value或value-是前缀
	[attr $= value]: 存在 且 value是后缀

4.元素状态
	:focus	焦点
	:enabled	启用
	:disabled  	禁用
	
	:checked	选中的（只要是能选的都行）
	:selected	下拉选中的
	
	:visible	visibility:hidden 或者 opacity:0 （认为可见，只要占空间就算）当心考概念
	:hidden		display为none时（一切跟:visible相反）

5.元素的内容
	:contains("{文本}")  子文本内容进行模糊匹配    .innerText
	:has("子元素选择器")  通过子元素找父元素	  .innerHtml
	:empty				 不包含任何子元素或文本
	:parent				 是父元素

6.在结果中进行二次筛选（不是css选择器 && 只能应用于dom对象）$('xxx').filter('{0}')
	:first	第一个
	:last   最后一个
	:even	偶数
	:odd	奇数
	:eq(index)	第几个
	:lt(index)  前几个 less than
	:gt(index)	后几个 greater than
	

四、操作dom元素
1.dom元素的属性
	.html('html文本')
	.text('文本')
	.val('值')  
	.attr('名称', '值(文本)')
	.prop('名称', '值(js对象)')  重点区分概念

2.dom元素的样式
	.addClass('样式类')
	.removeClass('样式类')
	.toggleClass('样式类')
	
	.css('样式名称', '值')

3.dom结构
1）容器内添加dom元素
	.append(表达dom元素的jquery对象)    追加到容器里最后一个子元素的后面
	.prepend(表达dom元素的jquery对象)   插入到容器里第一个子元素的前面
	[主宾顺序颠倒]
	.appendTo('dom容器元素')       
	.prependTo('dom容器元素')

2）容器外添加dom元素
	.after('dom元素')		紧挨着在 后 面添加
	.before('dom元素')		紧挨着在 前 面添加
	[主宾顺序颠倒]
	.insertAfter('dom元素')
	.insertBefore('dom元素')

3）替换dom元素
	.replaceWith('dom元素')

4）移除dom元素
	.remove()

5.添加动画效果
	.animate({css样式}, 动画时间, 回调函数)
	
	.show(动画时间, 回调函数)
	.hide(动画时间, 回调函数)

	.slideDown(动画时间, 回调函数)
	.slideUp(动画时间, 回调函数)
	.slideToggle(动画时间, 回调函数)

	.fadeIn(动画时间, 回调函数)
	.fadeOut(动画时间, 回调函数)
	.fadeTo(动画时间, 回调函数)
	.fadeToggle(动画时间, 回调函数)


五、事件处理
（相比dom事件，仅仅是提供了另外一种形式的接口）
1.监听事件
$('dom对象').on('事件名称', '子元素选择器', {传给事件的数据}, function(){
	
})

2.取消监听
$('dom对象').off('事件名称', '子元素选择器')

3.模拟（手动）触发
$('dom对象').trigger('事件名称')

4.事件参数event
event.metakey	windows键是否被按下
event.which		字母键
event.data		监听事件时，传过来的数据
event.stopPropagation()		组织事件冒泡
event.preventDefault()		取消浏览器的默认行为
// return false == event.stopPropagation() + event.preventDefault()


六、工具方法
1.集合遍历
$.each(数组, function(index, obj){

})

2.集合筛选
$.grep(数组, function(obj, index){

})


七、Ajax
$.ajax({
	url: '服务端地址',
	type: '提交方式get/post/put/delete',
	data: {},
	
	dataType: '返回数据的类型（常用：text/json/html/xml）',
	success: function(data){
		// data = 返回的数据
	}
	error: function(jqXHR, textStatus, errorThrown){
		// alert(textStatus + ':' + errorThrown)
	}
})


