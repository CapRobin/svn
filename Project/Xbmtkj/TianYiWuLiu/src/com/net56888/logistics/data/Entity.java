package com.net56888.logistics.data;

import java.util.ArrayList;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.provider.BaseColumns;

public abstract class Entity extends Record {
    
    private long Id;

    public long getId() {
        return Id;
    }

    public Entity() {
        Id = -1l;
    }

    @Override
    public boolean insert(DataTable table) {
        DataBase db = table.getDataBase();
        SQLiteDatabase wdb = db.open().getReadableDatabase();
        ContentValues values = setFieldValues();
        boolean result = (wdb.insert(table.getTableName(), null, values) > 0);
        db.close();
        return result;
    }

    @Override
    public boolean update(DataTable table) {
        DataBase db = table.getDataBase();
        SQLiteDatabase wdb = db.open().getReadableDatabase();
        ContentValues values = setFieldValues();
        String whereClause = Fields._ID + " = ?";
        String whereArgs[] = new String[1];
        whereArgs[0] = Long.toString(Id);
        int count = wdb.update(table.getTableName(), values, whereClause,
                whereArgs);
        boolean result = (count > 0);
        db.close();
        return result;
    }

    @Override
    public boolean delete(DataTable table) {
        DataBase db = table.getDataBase();
        SQLiteDatabase wdb = db.getReadableDatabase();
        String whereClause = Fields._ID + " = ?";
        String whereArgs[] = new String[1];
        whereArgs[0] = Long.toString(Id);
        boolean result = (0 < wdb.delete(table.getTableName(), whereClause, whereArgs));
        db.close();
        return result;
    }

    @Override
    protected void writeFieldValues(ContentValues values) {
        // 'Id' shouldn't be set to any data, so we leave
        // this function empty.
    }

    @Override
    protected void readFieldValues(Cursor c) {
        // the 'Id' is generated by Sqlite, let's read it.
        Id = c.getLong(c.getColumnIndex(Fields._ID));
    }

    @Override
    protected void addFieldDefinitions(ArrayList<String> fieldDefinitions) {
        fieldDefinitions.add(Fields._ID + " INTEGER PRIMARY KEY");
    }

    public class Fields implements BaseColumns {
        // we will use _ID field from BaseColumns
    }
}
